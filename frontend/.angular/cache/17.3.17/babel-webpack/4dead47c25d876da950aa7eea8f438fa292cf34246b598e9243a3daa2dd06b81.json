{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { HasPermissionDirective } from \"../../directives/has-permission.directive\";\nlet RegistrosComponent = class RegistrosComponent {\n  constructor(authService, registroService) {\n    this.authService = authService;\n    this.registroService = registroService;\n    this.registros = [];\n    this.mostrarFormulario = false;\n    this.modoEdicion = false;\n    this.registroActual = {\n      titulo: \"\",\n      descripcion: \"\"\n    };\n    this.mensaje = \"\";\n    this.tipoMensaje = \"\";\n  }\n  ngOnInit() {\n    this.cargarRegistros();\n  }\n  cargarRegistros() {\n    this.registroService.listar().subscribe({\n      next: response => {\n        this.registros = response.registros;\n      },\n      error: err => {\n        this.mostrarMensaje(\"Error al cargar registros\", \"danger\");\n      }\n    });\n  }\n  abrirFormularioCrear() {\n    this.modoEdicion = false;\n    this.registroActual = {\n      titulo: \"\",\n      descripcion: \"\"\n    };\n    this.mostrarFormulario = true;\n    this.mensaje = \"\";\n  }\n  abrirFormularioEditar(registro) {\n    this.modoEdicion = true;\n    this.registroActual = {\n      ...registro\n    };\n    this.mostrarFormulario = true;\n    this.mensaje = \"\";\n  }\n  cancelar() {\n    this.mostrarFormulario = false;\n    this.registroActual = {\n      titulo: \"\",\n      descripcion: \"\"\n    };\n    this.mensaje = \"\";\n  }\n  guardar() {\n    if (!this.registroActual.titulo || !this.registroActual.descripcion) {\n      this.mostrarMensaje(\"Por favor complete todos los campos\", \"danger\");\n      return;\n    }\n    if (this.modoEdicion) {\n      this.registroService.actualizar(this.registroActual).subscribe({\n        next: () => {\n          this.mostrarMensaje(\"Registro actualizado exitosamente\", \"success\");\n          this.cargarRegistros();\n          this.cancelar();\n        },\n        error: err => {\n          this.mostrarMensaje(err.error?.mensaje || \"Error al actualizar registro\", \"danger\");\n        }\n      });\n    } else {\n      this.registroService.crear(this.registroActual).subscribe({\n        next: () => {\n          this.mostrarMensaje(\"Registro creado exitosamente\", \"success\");\n          this.cargarRegistros();\n          this.cancelar();\n        },\n        error: err => {\n          this.mostrarMensaje(err.error?.mensaje || \"Error al crear registro\", \"danger\");\n        }\n      });\n    }\n  }\n  eliminar(id) {\n    if (confirm(\"¿Está seguro de eliminar este registro?\")) {\n      this.registroService.eliminar(id).subscribe({\n        next: () => {\n          this.mostrarMensaje(\"Registro eliminado exitosamente\", \"success\");\n          this.cargarRegistros();\n        },\n        error: err => {\n          this.mostrarMensaje(err.error?.mensaje || \"Error al eliminar registro\", \"danger\");\n        }\n      });\n    }\n  }\n  mostrarMensaje(texto, tipo) {\n    this.mensaje = texto;\n    this.tipoMensaje = tipo;\n    setTimeout(() => {\n      this.mensaje = \"\";\n      this.tipoMensaje = \"\";\n    }, 5000);\n  }\n};\nRegistrosComponent = __decorate([Component({\n  selector: \"app-registros\",\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterModule, HasPermissionDirective],\n  templateUrl: \"./registros.component.html\",\n  styleUrls: [\"./registros.component.css\"]\n})], RegistrosComponent);\nexport { RegistrosComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","RouterModule","HasPermissionDirective","RegistrosComponent","constructor","authService","registroService","registros","mostrarFormulario","modoEdicion","registroActual","titulo","descripcion","mensaje","tipoMensaje","ngOnInit","cargarRegistros","listar","subscribe","next","response","error","err","mostrarMensaje","abrirFormularioCrear","abrirFormularioEditar","registro","cancelar","guardar","actualizar","crear","eliminar","id","confirm","texto","tipo","setTimeout","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\ferme\\Downloads\\roles-permisos-system\\frontend\\src\\app\\components\\registros\\registros.component.ts"],"sourcesContent":["import { Component, type OnInit } from \"@angular/core\"\nimport { CommonModule } from \"@angular/common\"\nimport { FormsModule } from \"@angular/forms\"\nimport { RouterModule } from \"@angular/router\"\nimport { AuthService } from \"../../services/auth.service\"\nimport { RegistroService } from \"../../services/registro.service\"\nimport { Registro } from \"../../models/registro.model\"\nimport { HasPermissionDirective } from \"../../directives/has-permission.directive\"\n\n@Component({\n  selector: \"app-registros\",\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterModule, HasPermissionDirective],\n  templateUrl: \"./registros.component.html\",\n  styleUrls: [\"./registros.component.css\"],\n})\nexport class RegistrosComponent implements OnInit {\n  registros: Registro[] = []\n  mostrarFormulario = false\n  modoEdicion = false\n  registroActual: Registro = { titulo: \"\", descripcion: \"\" }\n  mensaje = \"\"\n  tipoMensaje: \"success\" | \"danger\" | \"\" = \"\"\n\n  constructor(\n    public authService: AuthService,\n    private registroService: RegistroService,\n  ) {}\n\n  ngOnInit(): void {\n    this.cargarRegistros()\n  }\n\n  cargarRegistros(): void {\n    this.registroService.listar().subscribe({\n      next: (response) => {\n        this.registros = response.registros\n      },\n      error: (err) => {\n        this.mostrarMensaje(\"Error al cargar registros\", \"danger\")\n      },\n    })\n  }\n\n  abrirFormularioCrear(): void {\n    this.modoEdicion = false\n    this.registroActual = { titulo: \"\", descripcion: \"\" }\n    this.mostrarFormulario = true\n    this.mensaje = \"\"\n  }\n\n  abrirFormularioEditar(registro: Registro): void {\n    this.modoEdicion = true\n    this.registroActual = { ...registro }\n    this.mostrarFormulario = true\n    this.mensaje = \"\"\n  }\n\n  cancelar(): void {\n    this.mostrarFormulario = false\n    this.registroActual = { titulo: \"\", descripcion: \"\" }\n    this.mensaje = \"\"\n  }\n\n  guardar(): void {\n    if (!this.registroActual.titulo || !this.registroActual.descripcion) {\n      this.mostrarMensaje(\"Por favor complete todos los campos\", \"danger\")\n      return\n    }\n\n    if (this.modoEdicion) {\n      this.registroService.actualizar(this.registroActual).subscribe({\n        next: () => {\n          this.mostrarMensaje(\"Registro actualizado exitosamente\", \"success\")\n          this.cargarRegistros()\n          this.cancelar()\n        },\n        error: (err) => {\n          this.mostrarMensaje(err.error?.mensaje || \"Error al actualizar registro\", \"danger\")\n        },\n      })\n    } else {\n      this.registroService.crear(this.registroActual).subscribe({\n        next: () => {\n          this.mostrarMensaje(\"Registro creado exitosamente\", \"success\")\n          this.cargarRegistros()\n          this.cancelar()\n        },\n        error: (err) => {\n          this.mostrarMensaje(err.error?.mensaje || \"Error al crear registro\", \"danger\")\n        },\n      })\n    }\n  }\n\n  eliminar(id: number): void {\n    if (confirm(\"¿Está seguro de eliminar este registro?\")) {\n      this.registroService.eliminar(id).subscribe({\n        next: () => {\n          this.mostrarMensaje(\"Registro eliminado exitosamente\", \"success\")\n          this.cargarRegistros()\n        },\n        error: (err) => {\n          this.mostrarMensaje(err.error?.mensaje || \"Error al eliminar registro\", \"danger\")\n        },\n      })\n    }\n  }\n\n  private mostrarMensaje(texto: string, tipo: \"success\" | \"danger\"): void {\n    this.mensaje = texto\n    this.tipoMensaje = tipo\n    setTimeout(() => {\n      this.mensaje = \"\"\n      this.tipoMensaje = \"\"\n    }, 5000)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}